# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_nn.ipynb.

# %% auto 0
__all__ = ['Module', 'Neuron', 'Layer', 'MLP']

# %% ../nbs/02_nn.ipynb 2
from .engine import Value
import random

# %% ../nbs/02_nn.ipynb 5
class Module:
    "Base class"
    def zero_grad(self):
        for p in self.parameters():
            p.grad = 0
    
    def parameters(self):
        return []

# %% ../nbs/02_nn.ipynb 6
class Neuron(Module):
    # Neuron is a single calculation node
    def __init__(self,
                 nin, # number of inputs (parameters) for each node
                 nonlin=True # whether to use nonlinearity
                ):
        self.w = [Value(random.uniform(-1,1)) for _ in range(nin)]
        self.b = Value(0)
        self.nonlin = nonlin
    
    def __call__(self, x):
        activation = sum([xi*wi for (xi, wi) in zip(x, self.w)]) + self.b
        return activation.relu() if self.nonlin else activation
    
    def parameters(self):
        return self.w + [self.b]
    
    def __repr__(self):
        return f"{'ReLU' if self.nonlin  else  'Linear'} Neuron({len(self.w)})"

# %% ../nbs/02_nn.ipynb 11
class Layer(Module):
    def __init__(self, nin, nout, **kwargs):
        self.neurons = [Neuron(nin, **kwargs) for _ in range(nout)]
    
    def __call__(self, x):
        out = [n(x) for n in self.neurons]
        # if nout is 1 then simple return an item rather than a list on one item
        return out[0] if len(out) == 1 else out
        
    def parameters(self):
        return [p for n in self.neurons for p in n.parameters()]
    
    def __repr__(self):
        return f"Layer of [{', '.join(str(n) for n in self.neurons)}]"


# %% ../nbs/02_nn.ipynb 16
class MLP(Module):
    def __init__(self,
                 nin, # number of inputs
                 nouts # list of inputs and outputs for each subsequent Layer
                ):
        sz = [nin] + nouts
        self.layers = [Layer(sz[i], sz[i+1], nonlin = i != len(nouts)-1) for i in range(len(nouts))]
        
    def __call__(self, x):
        for layer in self.layers:
            x = layer(x)
        return x
    
    def parameters(self):
        return [p for l in self.layers for p in l.parameters()]
    
    def __repr__(self):
        return f"MLP of [{', '.join(str(l) for l in self.layers)}]"
