# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_diagram.ipynb.

# %% auto 0
__all__ = ['trace', 'draw_dot']

# %% ../nbs/01_diagram.ipynb 3
from .engine import Value
from graphviz import Digraph

# %% ../nbs/01_diagram.ipynb 4
def trace(root # `Value` node
         ):
    # each node of the calculation. List can be used as well for nodes and edges
    nodes = set()
    # each child of each node. For nodes that are not the result of an operation there will be none
    edges = set()
    def get_children(node):
        if node not in nodes:
            nodes.add(node)
            for child in node._prev:
                edges.add((node, child))
                get_children(child)
    
    get_children(root)
    return nodes, edges

# %% ../nbs/01_diagram.ipynb 6
def draw_dot(root, # final node from which to trace
              format='svg', # rendering output format of DOT
              rankdir='LR' # TB (top to bottom graph) | LR (left to right)
             ):
    assert rankdir in ['LR', 'TB']
    nodes, edges = trace(root)
    dot = Digraph(format=format, graph_attr={'rankdir':rankdir})
    
    for node in nodes:
        uid = str(id(node))
        # curly brackets are required to have a horizontal layout
        dot.node(uid, label = f"{{ {node.label} | {node.data :.4f} | {node.grad :.4f}}}", shape='record')
        #dot.node(uid, label = "%s | %.4f | %.4f" %(node.label, node.data, node.grad), shape='record')
        if node._op:
            dot.node(node._op+uid, label = node._op)
            dot.edge(node._op+uid, uid)

    for node, child in edges:
        # children are connected to nodes via operations
        dot.edge(str(id(child)), node._op+str(id(node)))

    return dot
